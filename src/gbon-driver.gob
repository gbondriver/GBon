requires 2.0.0


%headertop{
#include <stdio.h>
#include <stdlib.h>
#include <../config.h>    
#include "gbon-retval.h"
#include "gbon-b25.h"
#include "epgdump/gbonepg.h"
%}

%privateheader{
#include "cbon.h"
%}



class GBon:Driver from G:Object
{
    private CBon *cbon = NULL
        destroy {
            if (VAR) {
                g_printerr("free cbon\n");
                free(VAR);
            }
        };

    private GBonB25 *b25 = NULL
        destroy {
            if (VAR) {
                g_printerr("unref b25\n");
                g_object_unref(VAR);
            }
        };
                               
    private GQuark gquark= {g_quark_from_static_string("GBon")};


    public void load_module(self, gchar *driverFilename, GError **err) {
        self->_priv->cbon = cbon_load_module(driverFilename);
        if (self->_priv->cbon) 
            return;
        if (err == NULL) exit(1);
        
        *err = g_error_new(self->_priv->gquark,
                           -1, "load_module() error\n");
    }

    public void close_module(self) {
        cbon_close_module(self->_priv->cbon);
    }

    public void create_driver(self, GError **err) {
        gint ret = cbon_create_driver(self->_priv->cbon);
        if (ret)
            *err = g_error_new(self->_priv->gquark,
                               -3, "create_driver() error: %d\n", ret);
    }


    public void open_tuner(self, GError **err) {
        gint b = cbon_open_tuner(self->_priv->cbon);
        if (!b)
            *err = g_error_new(self->_priv->gquark,
                               -4, "open_tuner() error\n");
    }

    public void set_channel(self, guint8 ch, GError **err) {
        gint b = cbon_set_channel(self->_priv->cbon, ch);
        if (!b)
            *err = g_error_new(self->_priv->gquark,
                               -5, "set_channel() error\n");
    }

    public gfloat get_signal_level(self, GError **err) {
        gfloat f = cbon_get_signal_level(self->_priv->cbon);
        if (f < 0.0)
            *err = g_error_new(self->_priv->gquark,
                               -7, "get_signal_level() error\n");
        return f;
    }


/**
 * get_ts_stream:
 * @b25: (nullable)
 * Returns: (transfer full)
 *
 */
    public GBon:RetVal *get_ts_stream(self, GBon:B25 *b25) {
        guint8 *dest;
	guint size, remain;
        gint b = cbon_get_ts_stream(self->_priv->cbon, &dest, &size, &remain);
        GBonRetVal *rv = gbon_retval_new();
        rv->status = b;
        rv->size = size;
        rv->remain = remain;
        if (!b) return rv;
        if (b25) {
            if (gbon_b25_is_enabled()) {
                GError *b25_err = NULL;
                guint8 *b25_dbuf;
                gsize b25_size;
                b25_dbuf = gbon_b25_decode
                    (b25, dest, size, &b25_size, &b25_err);
                if (b25_err) {
                    g_printerr
                        ("%s: %d:\n", b25_err->message, b25_err->code);
		    gbon_retval_set_buf(rv, dest, size);
		} else {
                    gbon_retval_set_buf(rv, b25_dbuf, b25_size);
		    rv->size = b25_size;
		}
            } else {
                g_printerr("b25 decoding is desabled\n");
                gbon_retval_set_buf(rv, dest, size);
            }
        } else {
            gbon_retval_set_buf(rv, dest, size);
        }
        return rv;
    }

    public guint8 wait_ts_stream(self, guint8 timeout) {
        return cbon_wait_ts_stream(self->_priv->cbon, timeout);
    }
    public guint8 get_ready_count(self) {
        return cbon_get_ready_count(self->_priv->cbon);
    }
    public void purge_ts_stream(self) {
        cbon_purge_ts_stream(self->_priv->cbon);
    }

    public void release(self) {
        cbon_release(self->_priv->cbon);
    }

    public gchar* get_tuner_name(self) {
        const unsigned short *lpctstr = cbon_get_tuner_name(self->_priv->cbon);
        return lpctstr;
    }
    public gboolean is_tuner_opening(self) {
        return cbon_is_tuner_opening(self->_priv->cbon);
    }
    public guchar* enum_tuning_space(self, guint8 space) {
        const unsigned short *lpctstr
            = cbon_enum_tuning_space(self->_priv->cbon, space);
        return lpctstr;
    }
    public guchar* enum_channel_name(self, guint8 space, guint8 ch) {
        const unsigned short *lpctstr
            = cbon_enum_channel_name(self->_priv->cbon, space, ch);
        return lpctstr;
    }
    
    public void set_channel2(self, guint8 space, guint8 ch, GError **err) {
        gint b = cbon_set_channel2(self->_priv->cbon, space, ch);
        if (!b)
            *err = g_error_new(self->_priv->gquark,
                               -6, "set_channel2() error\n");
    }

    public guint8 get_cur_space(self) {
        return cbon_get_cur_space(self->_priv->cbon);
    }
    public guint8 get_cur_channel(self) {
        return cbon_get_cur_channel(self->_priv->cbon);
    }

    public guint8 get_total_device_num(self) {
        return cbon_get_total_device_num(self->_priv->cbon);
    }
    public guint8 get_active_device_num(self) {
        return cbon_get_active_device_num(self->_priv->cbon);
    }
    public void set_lnb_power(self, gboolean enable, GError **err) {
        gint b = cbon_set_lnb_power(self->_priv->cbon, enable);
        if (!b)
            *err = g_error_new(self->_priv->gquark,
                               -6, "set_lnb_power() error\n");
    }

    public void close_tuner(self) {
        cbon_close_tuner(self->_priv->cbon);
    }


    public GBon:Driver *new (void) {
    	   test_main("/home/igari/test11.ts", "test11.json");
        return  (GBonDriver *)(GET_NEW);
    }
}

    
